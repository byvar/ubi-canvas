using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;

namespace ITF {
	// In Adventures, FriseConfig is a subclass of Actor_Template
	public class FriseConfig : TemplatePickable {
		public Path gameMaterial;
		public Path gameMaterialExtremityStart;
		public Path gameMaterialExtremityStop;
		public float visualOffset;
		public StringID regionId;
		public bool useFriezeFlipToFlipUV;
		public float cornerFactor;
		public float height;
		public float width;
		public uint methode;
		public float snapCoeff;
		public float snapCoeffUv;
		public float flexibilty;
		public Angle wallAngle;
		public bool isUvFlipX;
		public bool isUvFlipY;
		public bool isRatioFixed;
		public float smoothFactorVisual;
		public float scale;
		public float density;
		public CollisionFrieze collision;
		public FillConfig fill;
		public float zExtrudeUp;
		public float zExtrudeDown;
		public float zExtrudeStop;
		public float zExtrudeStart;
		public float zExtrudeExtremityStart;
		public float zExtrudeExtremityStop;
		public float patchCoeffOffset;
		public float patchScale;
		public bool patchOriented;
		public float patchCornerFactorCollision;
		public Angle patchAngleMin;
		public Vector2 extremityScale;
		public ColorInteger selfIllumColor;
		public Container<FriseTextureConfig> textureConfigs;
		public VertexAnim vertexAnim;
		public FluidConfig fluid;
		public float skewAngle;
		public bool isDigShape;
		public bool isLockedDigShape;
		public bool switchExtremityAuto;
		public float offsetExtremity;
		public int idTexSwitch;
		public bool cooked;
		public Container<int> textureConfigIndexBySlope;
		public Container<int> textureConfigIndexByZone;
		public bool smoothVisual;
		public GFXPrimitiveParam primitiveParameters;

		public FriseConfig(Reader reader) : base(reader) {
			gameMaterial = new Path(reader);
			gameMaterialExtremityStart = new Path(reader);
			gameMaterialExtremityStop = new Path(reader);
			visualOffset = reader.ReadSingle();
			regionId = new StringID(reader);
			useFriezeFlipToFlipUV = reader.ReadBoolean();
			cornerFactor = reader.ReadSingle();
			height = reader.ReadSingle();
			width = reader.ReadSingle();
			methode = reader.ReadUInt32();
			snapCoeff = reader.ReadSingle();
			snapCoeffUv = reader.ReadSingle();
			flexibilty = reader.ReadSingle();
			wallAngle = new Angle(reader);
			isUvFlipX = reader.ReadBoolean();
			isUvFlipY = reader.ReadBoolean();
			isRatioFixed = reader.ReadBoolean();
			smoothFactorVisual = reader.ReadSingle();
			scale = reader.ReadSingle();
			density = reader.ReadSingle();
			collision = new CollisionFrieze(reader);
			fill = new FillConfig(reader);
			zExtrudeUp = reader.ReadSingle();
			zExtrudeDown = reader.ReadSingle();
			zExtrudeStop = reader.ReadSingle();
			zExtrudeStart = reader.ReadSingle();
			zExtrudeExtremityStart = reader.ReadSingle();
			zExtrudeExtremityStop = reader.ReadSingle();
			patchCoeffOffset = reader.ReadSingle();
			patchScale = reader.ReadSingle();
			patchOriented = reader.ReadBoolean();
			patchCornerFactorCollision = reader.ReadSingle();
			patchAngleMin = new Angle(reader);
			extremityScale = reader.ReadVector2();
			selfIllumColor = new ColorInteger(reader);
			textureConfigs = new Container<FriseTextureConfig>(reader);
			vertexAnim = new VertexAnim(reader);
			fluid = new FluidConfig(reader);
			skewAngle = reader.ReadSingle();
			isDigShape = reader.ReadBoolean();
			isLockedDigShape = reader.ReadBoolean();
			switchExtremityAuto = reader.ReadBoolean();
			offsetExtremity = reader.ReadSingle();
			idTexSwitch = reader.ReadInt32();
			cooked = reader.ReadBoolean();
			textureConfigIndexBySlope = new Container<int>(reader);
			textureConfigIndexByZone = new Container<int>(reader);
			smoothVisual = reader.ReadBoolean();
			primitiveParameters = new GFXPrimitiveParam(reader);
		}
	}
}
