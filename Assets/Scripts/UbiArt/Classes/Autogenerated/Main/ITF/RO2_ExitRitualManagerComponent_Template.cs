using UnityEngine;

namespace UbiArt.ITF {
	[Games(GameFlags.RA | GameFlags.RL)]
	public partial class RO2_ExitRitualManagerComponent_Template : ActorComponent_Template {
		[Serialize("animVictoryPlayer"      )] public StringID animVictoryPlayer;
		[Serialize("animFlying"             )] public StringID animFlying;
		[Serialize("animAfterJumpAnim"      )] public StringID animAfterJumpAnim;
		[Serialize("maxDelayBeforeAppearing")] public float maxDelayBeforeAppearing;
		[Serialize("victoryTime"            )] public float victoryTime;
		[Serialize("flyTime"                )] public float flyTime;
		[Serialize("runePath"               )] public Path runePath;
		[Serialize("runeBonesList"          )] public CList<StringID> runeBonesList;
		[Serialize("medalPaths"             )] public CArray<Path> medalPaths;
		[Serialize("medalBones"             )] public CList<StringID> medalBones;
		[Serialize("teensieScale"           )] public float teensieScale;
		[Serialize("appearPosOffset"        )] public float appearPosOffset;
		[Serialize("teensieOffsetOnRune"    )] public Vector3 teensieOffsetOnRune;
		[Serialize("teleportDuration"       )] public float teleportDuration;
		[Serialize("murphyPodiumOffset"     )] public Vector3 murphyPodiumOffset;
		[Serialize("murphyInAirOffset"      )] public Vector3 murphyInAirOffset;
		[Serialize("podiumBoneList"         )] public CList<StringID> podiumBoneList;
		[Serialize("startRitualFX"          )] public StringID startRitualFX;
		[Serialize("startTeleportFX"        )] public StringID startTeleportFX;
		[Serialize("onPositionFX"           )] public StringID onPositionFX;
		[Serialize("cameraFX"               )] public StringID cameraFX;
		[Serialize("fireworkFX"             )] public StringID fireworkFX;
		[Serialize("fireworksOffsets"       )] public CArray<Vector3> fireworksOffsets;
		[Serialize("minTimeBetweenFireworks")] public float minTimeBetweenFireworks;
		[Serialize("maxTimeBetweenFireworks")] public float maxTimeBetweenFireworks;
		[Serialize("cameraOffset"           )] public Vector3 cameraOffset;
		[Serialize("cameraOffsetInAir"      )] public Vector3 cameraOffsetInAir;
		[Serialize("cameraBlend"            )] public float cameraBlend;
		[Serialize("depthForHighestY"       )] public float depthForHighestY;
		[Serialize("depthForLowestY"        )] public float depthForLowestY;
		[Serialize("eyeDoor"                )] public Path eyeDoor;
		[Serialize("eyeDoorOffset"          )] public float eyeDoorOffset;
		[Serialize("eyeDoorSnapPoly"        )] public StringID eyeDoorSnapPoly;
		[Serialize("retroMode"              )] public bool retroMode;
		[Serialize("appearAnim"             )] public StringID appearAnim;
		[Serialize("musicEvent"             )] public Generic<Event> musicEvent;
		[Serialize("onStartFadeEvent"       )] public Generic<Event> onStartFadeEvent;
		[Serialize("onFadeFinishedEvent"    )] public Generic<Event> onFadeFinishedEvent;
		[Serialize("isUsedInCinematic"      )] public bool isUsedInCinematic;
		[Serialize("isUsedInInvasion"       )] public bool isUsedInInvasion;
		[Serialize("transformFlashFX"       )] public Path transformFlashFX;
		[Serialize("waitTransformFlashFX"   )] public float waitTransformFlashFX;
		[Serialize("minDelayBeforeAppearing")] public float minDelayBeforeAppearing;
		protected override void SerializeImpl(CSerializerObject s) {
			base.SerializeImpl(s);
			if (Settings.s.game == Settings.Game.RL) {
				SerializeField(s, nameof(animVictoryPlayer));
				SerializeField(s, nameof(animFlying));
				SerializeField(s, nameof(animAfterJumpAnim));
				SerializeField(s, nameof(minDelayBeforeAppearing));
				SerializeField(s, nameof(maxDelayBeforeAppearing));
				SerializeField(s, nameof(victoryTime));
				SerializeField(s, nameof(flyTime));
				SerializeField(s, nameof(runePath));
				SerializeField(s, nameof(runeBonesList));
				SerializeField(s, nameof(medalPaths));
				SerializeField(s, nameof(medalBones));
				SerializeField(s, nameof(teensieScale));
				SerializeField(s, nameof(appearPosOffset));
				SerializeField(s, nameof(teensieOffsetOnRune));
				SerializeField(s, nameof(teleportDuration));
				SerializeField(s, nameof(murphyPodiumOffset));
				SerializeField(s, nameof(murphyInAirOffset));
				SerializeField(s, nameof(podiumBoneList));
				SerializeField(s, nameof(startRitualFX));
				SerializeField(s, nameof(startTeleportFX));
				SerializeField(s, nameof(onPositionFX));
				SerializeField(s, nameof(cameraFX));
				SerializeField(s, nameof(fireworkFX));
				SerializeField(s, nameof(fireworksOffsets));
				SerializeField(s, nameof(minTimeBetweenFireworks));
				SerializeField(s, nameof(maxTimeBetweenFireworks));
				SerializeField(s, nameof(cameraOffset));
				SerializeField(s, nameof(cameraOffsetInAir));
				SerializeField(s, nameof(cameraBlend));
				SerializeField(s, nameof(depthForHighestY));
				SerializeField(s, nameof(depthForLowestY));
				SerializeField(s, nameof(eyeDoor));
				SerializeField(s, nameof(eyeDoorOffset));
				SerializeField(s, nameof(eyeDoorSnapPoly));
				SerializeField(s, nameof(retroMode));
				SerializeField(s, nameof(appearAnim));
				SerializeField(s, nameof(musicEvent));
				SerializeField(s, nameof(onStartFadeEvent));
				SerializeField(s, nameof(onFadeFinishedEvent));
				SerializeField(s, nameof(isUsedInCinematic));
				SerializeField(s, nameof(isUsedInInvasion));
				SerializeField(s, nameof(transformFlashFX));
				SerializeField(s, nameof(waitTransformFlashFX));
			} else {
				SerializeField(s, nameof(animVictoryPlayer));
				SerializeField(s, nameof(animFlying));
				SerializeField(s, nameof(animAfterJumpAnim));
				SerializeField(s, nameof(maxDelayBeforeAppearing));
				SerializeField(s, nameof(victoryTime));
				SerializeField(s, nameof(flyTime));
				SerializeField(s, nameof(runePath));
				SerializeField(s, nameof(runeBonesList));
				SerializeField(s, nameof(medalPaths));
				SerializeField(s, nameof(medalPaths));
				SerializeField(s, nameof(medalBones));
				SerializeField(s, nameof(teensieScale));
				SerializeField(s, nameof(appearPosOffset));
				SerializeField(s, nameof(teensieOffsetOnRune));
				SerializeField(s, nameof(teleportDuration));
				SerializeField(s, nameof(murphyPodiumOffset));
				SerializeField(s, nameof(murphyInAirOffset));
				SerializeField(s, nameof(podiumBoneList));
				SerializeField(s, nameof(startRitualFX));
				SerializeField(s, nameof(startTeleportFX));
				SerializeField(s, nameof(onPositionFX));
				SerializeField(s, nameof(cameraFX));
				SerializeField(s, nameof(fireworkFX));
				SerializeField(s, nameof(fireworksOffsets));
				SerializeField(s, nameof(fireworksOffsets));
				SerializeField(s, nameof(minTimeBetweenFireworks));
				SerializeField(s, nameof(maxTimeBetweenFireworks));
				SerializeField(s, nameof(cameraOffset));
				SerializeField(s, nameof(cameraOffsetInAir));
				SerializeField(s, nameof(cameraBlend));
				SerializeField(s, nameof(depthForHighestY));
				SerializeField(s, nameof(depthForLowestY));
				SerializeField(s, nameof(eyeDoor));
				SerializeField(s, nameof(eyeDoorOffset));
				SerializeField(s, nameof(eyeDoorSnapPoly));
				SerializeField(s, nameof(retroMode));
				SerializeField(s, nameof(appearAnim));
				SerializeField(s, nameof(musicEvent));
				SerializeField(s, nameof(onStartFadeEvent));
				SerializeField(s, nameof(onFadeFinishedEvent));
				SerializeField(s, nameof(isUsedInCinematic));
				SerializeField(s, nameof(isUsedInInvasion));
				SerializeField(s, nameof(transformFlashFX));
				SerializeField(s, nameof(waitTransformFlashFX));
			}
		}
		public override uint? ClassCRC => 0x772FDBD5;
	}
}

