using UnityEngine;

namespace UbiArt.ITF {
	public partial class RO2_BabyPiranhaAIComponent_Template : AIComponent_Template {
		[Serialize("speed"                     )] public float speed;
		[Serialize("detectionRange"            )] public float detectionRange;
		[Serialize("attackRange"               )] public float attackRange;
		[Serialize("attackTime"                )] public float attackTime;
		[Serialize("attackCooldown"            )] public float attackCooldown;
		[Serialize("idlePercent"               )] public float idlePercent;
		[Serialize("attackJumpPercent"         )] public float attackJumpPercent;
		[Serialize("attackDivePercent"         )] public float attackDivePercent;
		[Serialize("idlePerturbation"          )] public float idlePerturbation;
		[Serialize("attackPerturbation"        )] public float attackPerturbation;
		[Serialize("attackStartTime"           )] public float attackStartTime;
		[Serialize("escapeDst"                 )] public float escapeDst;
		[Serialize("escapeTime"                )] public float escapeTime;
		[Serialize("hitLevel"                  )] public uint hitLevel;
		[Serialize("bounceMultiplier"          )] public float bounceMultiplier;
		[Serialize("onlyAttackTargetInWater"   )] public bool onlyAttackTargetInWater;
		[Serialize("idleRadiusMin"             )] public float idleRadiusMin;
		[Serialize("idleRadiusMax"             )] public float idleRadiusMax;
		[Serialize("idleSpeedMin"              )] public float idleSpeedMin;
		[Serialize("idleSpeedMax"              )] public float idleSpeedMax;
		[Serialize("inertia"                   )] public float inertia;
		[Serialize("xLimitMultiplier"          )] public float xLimitMultiplier;
		[Serialize("desyncRatio"               )] public float desyncRatio;
		[Serialize("minJumpTime"               )] public float minJumpTime;
		[Serialize("maxJumpTime"               )] public float maxJumpTime;
		[Serialize("minJumpDst"                )] public float minJumpDst;
		[Serialize("maxJumpDst"                )] public float maxJumpDst;
		[Serialize("minDiveTime"               )] public float minDiveTime;
		[Serialize("maxDiveTime"               )] public float maxDiveTime;
		[Serialize("minDiveDst"                )] public float minDiveDst;
		[Serialize("maxDiveDst"                )] public float maxDiveDst;
		[Serialize("minSpeed"                  )] public float minSpeed;
		[Serialize("maxSpeed"                  )] public float maxSpeed;
		[Serialize("insideLen"                 )] public float insideLen;
		[Serialize("attackSlowDown"            )] public float attackSlowDown;
		[Serialize("dstFromSurface"            )] public float dstFromSurface;
		[Serialize("pertubationFrequence"      )] public float pertubationFrequence;
		[Serialize("perturbationRadiusRatio"   )] public float perturbationRadiusRatio;
		[Serialize("fruitInfluenceDistMin"     )] public float fruitInfluenceDistMin;
		[Serialize("fruitInfluenceDistMax"     )] public float fruitInfluenceDistMax;
		[Serialize("speedFractionWhenNearFruit")] public float speedFractionWhenNearFruit;
		[Serialize("pirahnaRadius"             )] public float pirahnaRadius;
		[Serialize("canGoInsideWater"          )] public bool canGoInsideWater;
		[Serialize("numPiranhas"               )] public uint numPiranhas;
		[Serialize("genBox"                    )] public AABB genBox;
		protected override void SerializeImpl(CSerializerObject s) {
			base.SerializeImpl(s);
			SerializeField(s, nameof(speed));
			SerializeField(s, nameof(detectionRange));
			SerializeField(s, nameof(attackRange));
			SerializeField(s, nameof(attackTime));
			SerializeField(s, nameof(attackCooldown));
			SerializeField(s, nameof(idlePercent));
			SerializeField(s, nameof(attackJumpPercent));
			SerializeField(s, nameof(attackDivePercent));
			SerializeField(s, nameof(idlePerturbation));
			SerializeField(s, nameof(attackPerturbation));
			SerializeField(s, nameof(attackStartTime));
			SerializeField(s, nameof(escapeDst));
			SerializeField(s, nameof(escapeTime));
			SerializeField(s, nameof(hitLevel));
			SerializeField(s, nameof(bounceMultiplier));
			SerializeField(s, nameof(onlyAttackTargetInWater));
			SerializeField(s, nameof(idleRadiusMin));
			SerializeField(s, nameof(idleRadiusMax));
			SerializeField(s, nameof(idleSpeedMin));
			SerializeField(s, nameof(idleSpeedMax));
			SerializeField(s, nameof(inertia));
			SerializeField(s, nameof(xLimitMultiplier));
			SerializeField(s, nameof(desyncRatio));
			SerializeField(s, nameof(minJumpTime));
			SerializeField(s, nameof(maxJumpTime));
			SerializeField(s, nameof(minJumpDst));
			SerializeField(s, nameof(maxJumpDst));
			SerializeField(s, nameof(minDiveTime));
			SerializeField(s, nameof(maxDiveTime));
			SerializeField(s, nameof(minDiveDst));
			SerializeField(s, nameof(maxDiveDst));
			SerializeField(s, nameof(minSpeed));
			SerializeField(s, nameof(maxSpeed));
			SerializeField(s, nameof(insideLen));
			SerializeField(s, nameof(attackSlowDown));
			SerializeField(s, nameof(dstFromSurface));
			SerializeField(s, nameof(pertubationFrequence));
			SerializeField(s, nameof(perturbationRadiusRatio));
			SerializeField(s, nameof(fruitInfluenceDistMin));
			SerializeField(s, nameof(fruitInfluenceDistMax));
			SerializeField(s, nameof(speedFractionWhenNearFruit));
			SerializeField(s, nameof(pirahnaRadius));
			SerializeField(s, nameof(canGoInsideWater));
			SerializeField(s, nameof(numPiranhas));
			SerializeField(s, nameof(genBox));
		}
		public override uint? ClassCRC => 0x2653993B;
	}
}

