using UnityEngine;

namespace UbiArt.ITF {
	[Games(GameFlags.RA | GameFlags.VH | GameFlags.RJR | GameFlags.RFR | GameFlags.RL)]
	public partial class CamModifier_Template : CSerializable {
		[Serialize("cameraLookAtOffsetYUp"                   )] public float cameraLookAtOffsetYUp;
		[Serialize("cameraLookAtOffsetYDown"                 )] public float cameraLookAtOffsetYDown;
		[Serialize("cameraLookAtOffset"                      )] public Vec3d cameraLookAtOffset;
		[Serialize("cameraLookAtOffsetMaxInMulti"            )] public Vec3d cameraLookAtOffsetMaxInMulti;
		[Serialize("focale"                                  )] public Angle focale;
		[Serialize("ignoreZ"                                 )] public bool ignoreZ;
		[Serialize("zoneScaleDepthMin"                       )] public float zoneScaleDepthMin;
		[Serialize("zoneScaleDepthMax"                       )] public float zoneScaleDepthMax;
		[Serialize("zoneScaleAtDepthMin"                     )] public Vec2d zoneScaleAtDepthMin;
		[Serialize("zoneScaleAtDepthMax"                     )] public Vec2d zoneScaleAtDepthMax;
		[Serialize("zoneScaleSpeed"                          )] public float zoneScaleSpeed;
		[Serialize("cameraDecenteringOffsetAtSpeedMin"       )] public Vec2d cameraDecenteringOffsetAtSpeedMin;
		[Serialize("cameraDecenteringOffsetAtSpeedMax"       )] public Vec2d cameraDecenteringOffsetAtSpeedMax;
		[Serialize("cameraDecenteringSpeedMin"               )] public Vec2d cameraDecenteringSpeedMin;
		[Serialize("cameraDecenteringSpeedMax"               )] public Vec2d cameraDecenteringSpeedMax;
		[Serialize("cameraDecenteringBlendAtSpeedMin"        )] public Vec2d cameraDecenteringBlendAtSpeedMin;
		[Serialize("cameraDecenteringBlendAtSpeedMax"        )] public Vec2d cameraDecenteringBlendAtSpeedMax;
		[Serialize("cameraDecenteringInertieAtSpeedMin"      )] public Vec2d cameraDecenteringInertieAtSpeedMin;
		[Serialize("cameraDecenteringInertieAtSpeedMax"      )] public Vec2d cameraDecenteringInertieAtSpeedMax;
		[Serialize("cameraDecenteringSmooth"                 )] public Vec2d cameraDecenteringSmooth;
		[Serialize("cameraDecenteringSubjectLookDirWeight"   )] public Vec2d cameraDecenteringSubjectLookDirWeight;
		[Serialize("cameraDecenteringDepthMin"               )] public float cameraDecenteringDepthMin;
		[Serialize("cameraDecenteringDepthMax"               )] public float cameraDecenteringDepthMax;
		[Serialize("cameraMovingSpeedMin"                    )] public Vec2d cameraMovingSpeedMin;
		[Serialize("cameraMovingSpeedMax"                    )] public Vec2d cameraMovingSpeedMax;
		[Serialize("cameraMovingBlendAtSpeedMin"             )] public Vec2d cameraMovingBlendAtSpeedMin;
		[Serialize("cameraMovingBlendAtSpeedMax"             )] public Vec2d cameraMovingBlendAtSpeedMax;
		[Serialize("cameraMovingSmooth"                      )] public Vec2d cameraMovingSmooth;
		[Serialize("cameraMovingBlendAccelerationJustSticked")] public float cameraMovingBlendAccelerationJustSticked;
		[Serialize("rayCastScaleMax"                         )] public float rayCastScaleMax;
		[Serialize("lockPositionBlendOnEnter"                )] public float lockPositionBlendOnEnter;
		[Serialize("lockPositionBlendOnExit"                 )] public float lockPositionBlendOnExit;
		[Serialize("screenLimitUpSpeedMax"                   )] public float screenLimitUpSpeedMax;
		[Serialize("screenLimitUpScale"                      )] public float screenLimitUpScale;
		[Serialize("subjectWeightUnregisterDelay"            )] public float subjectWeightUnregisterDelay;
		[Serialize("subjectWeightRegisterDelay"              )] public float subjectWeightRegisterDelay;
		[Serialize("subjectMainVisibilityHorizontal"         )] public Vec2d subjectMainVisibilityHorizontal;
		[Serialize("subjectMainVisibilityVertical"           )] public Vec2d subjectMainVisibilityVertical;
		[Serialize("cameraMovingSmoothCoeffForLeader"        )] public float cameraMovingSmoothCoeffForLeader;
		[Serialize("subjectMainVisibilitySwitchAxeSpeed"     )] public float subjectMainVisibilitySwitchAxeSpeed;
		[Serialize("zoomBlendInMultiplayer"                  )] public float zoomBlendInMultiplayer;
		[Serialize("isMainSubject"                           )] public bool isMainSubject;
		[Serialize("isMainDRCPlayer"                         )] public bool isMainDRCPlayer;
		[Serialize("isLockedAxe"                             )] public bool isLockedAxe;
		[Serialize("isFixed"                                 )] public bool isFixed;


		[Serialize("modifierBlend"                           )] public float modifierBlend;
		[Serialize("modifierInertie"                         )] public float modifierInertie;
		[Serialize("constraintDelayToActivate"               )] public Vec3d constraintDelayToActivate;
		[Serialize("constraintDelayToDisable"                )] public Vec3d constraintDelayToDisable;
		[Serialize("constraintOverrideActivationDelay"       )] public Vec3d constraintOverrideActivationDelay;

		[Serialize("cameraDecenteringDelay"                  )] public Vec2d cameraDecenteringDelay;
		
		[Serialize("zoomInertieInMultiplayer"                )] public float zoomInertieInMultiplayer;
		[Serialize("zoomDelayInMultiplayer"                  )] public float zoomDelayInMultiplayer;
		[Serialize("dezoomBlendInMultiplayer"                )] public float dezoomBlendInMultiplayer;
		[Serialize("dezoomInertieInMultiplayer"              )] public float dezoomInertieInMultiplayer;
		[Serialize("cameraDriftDelay"                        )] public float cameraDriftDelay;
		[Serialize("controllerDriftDelay"                    )] public float controllerDriftDelay;

		

		protected override void SerializeImpl(CSerializerObject s) {
			base.SerializeImpl(s);
			if (Settings.s.game == Settings.Game.RJR || Settings.s.game == Settings.Game.RFR || Settings.s.game == Settings.Game.RO) {
				SerializeField(s, nameof(modifierBlend));
				SerializeField(s, nameof(modifierInertie));
				SerializeField(s, nameof(constraintDelayToActivate));
				SerializeField(s, nameof(constraintDelayToDisable));
				SerializeField(s, nameof(cameraLookAtOffsetYUp));
				SerializeField(s, nameof(cameraLookAtOffsetYDown));
				SerializeField(s, nameof(cameraLookAtOffset));
				SerializeField(s, nameof(cameraLookAtOffsetMaxInMulti));
				SerializeField(s, nameof(focale), type: typeof(float));
				SerializeField(s, nameof(ignoreZ));
				SerializeField(s, nameof(zoneScaleDepthMin));
				SerializeField(s, nameof(zoneScaleDepthMax));
				SerializeField(s, nameof(zoneScaleAtDepthMin));
				SerializeField(s, nameof(zoneScaleAtDepthMax));
				SerializeField(s, nameof(zoneScaleSpeed));
				SerializeField(s, nameof(cameraDecenteringOffsetAtSpeedMin));
				SerializeField(s, nameof(cameraDecenteringOffsetAtSpeedMax));
				SerializeField(s, nameof(cameraDecenteringSpeedMin));
				SerializeField(s, nameof(cameraDecenteringSpeedMax));
				SerializeField(s, nameof(cameraDecenteringBlendAtSpeedMin));
				SerializeField(s, nameof(cameraDecenteringBlendAtSpeedMax));
				SerializeField(s, nameof(cameraDecenteringDelay));
				SerializeField(s, nameof(cameraDecenteringInertieAtSpeedMin));
				SerializeField(s, nameof(cameraDecenteringInertieAtSpeedMax));
				SerializeField(s, nameof(cameraDecenteringSmooth));
				SerializeField(s, nameof(cameraDecenteringSubjectLookDirWeight));
				SerializeField(s, nameof(cameraDecenteringDepthMin));
				SerializeField(s, nameof(cameraDecenteringDepthMax));
				SerializeField(s, nameof(cameraMovingSpeedMin));
				SerializeField(s, nameof(cameraMovingSpeedMax));
				SerializeField(s, nameof(cameraMovingBlendAtSpeedMin));
				SerializeField(s, nameof(cameraMovingBlendAtSpeedMax));
				SerializeField(s, nameof(cameraMovingSmooth));
				SerializeField(s, nameof(cameraMovingBlendAccelerationJustSticked));
				SerializeField(s, nameof(rayCastScaleMax));
				SerializeField(s, nameof(lockPositionBlendOnEnter));
				SerializeField(s, nameof(lockPositionBlendOnExit));
				SerializeField(s, nameof(screenLimitUpSpeedMax));
				SerializeField(s, nameof(screenLimitUpScale));
				SerializeField(s, nameof(subjectWeightUnregisterDelay));
				SerializeField(s, nameof(subjectWeightRegisterDelay));
				SerializeField(s, nameof(subjectMainVisibilityHorizontal));
				SerializeField(s, nameof(subjectMainVisibilityVertical));
				SerializeField(s, nameof(cameraMovingSmoothCoeffForLeader));
				SerializeField(s, nameof(subjectMainVisibilitySwitchAxeSpeed));
				SerializeField(s, nameof(zoomBlendInMultiplayer));
				SerializeField(s, nameof(zoomInertieInMultiplayer));
				SerializeField(s, nameof(zoomDelayInMultiplayer));
				SerializeField(s, nameof(dezoomBlendInMultiplayer));
				SerializeField(s, nameof(dezoomInertieInMultiplayer));
				SerializeField(s, nameof(cameraDriftDelay));
				SerializeField(s, nameof(controllerDriftDelay));
				SerializeField(s, nameof(isMainSubject));
			} else if(Settings.s.game == Settings.Game.RL) {
				SerializeField(s, nameof(modifierBlend));
				SerializeField(s, nameof(modifierInertie));
				SerializeField(s, nameof(constraintDelayToActivate));
				SerializeField(s, nameof(constraintDelayToDisable));
				SerializeField(s, nameof(constraintOverrideActivationDelay));
				SerializeField(s, nameof(cameraLookAtOffsetYUp));
				SerializeField(s, nameof(cameraLookAtOffsetYDown));
				SerializeField(s, nameof(cameraLookAtOffset));
				SerializeField(s, nameof(cameraLookAtOffsetMaxInMulti));
				SerializeField(s, nameof(focale));
				SerializeField(s, nameof(ignoreZ));
				SerializeField(s, nameof(zoneScaleDepthMin));
				SerializeField(s, nameof(zoneScaleDepthMax));
				SerializeField(s, nameof(zoneScaleAtDepthMin));
				SerializeField(s, nameof(zoneScaleAtDepthMax));
				SerializeField(s, nameof(zoneScaleSpeed));
				SerializeField(s, nameof(cameraDecenteringOffsetAtSpeedMin));
				SerializeField(s, nameof(cameraDecenteringOffsetAtSpeedMax));
				SerializeField(s, nameof(cameraDecenteringSpeedMin));
				SerializeField(s, nameof(cameraDecenteringSpeedMax));
				SerializeField(s, nameof(cameraDecenteringBlendAtSpeedMin));
				SerializeField(s, nameof(cameraDecenteringBlendAtSpeedMax));
				SerializeField(s, nameof(cameraDecenteringDelay));
				SerializeField(s, nameof(cameraDecenteringInertieAtSpeedMin));
				SerializeField(s, nameof(cameraDecenteringInertieAtSpeedMax));
				SerializeField(s, nameof(cameraDecenteringSmooth));
				SerializeField(s, nameof(cameraDecenteringSubjectLookDirWeight));
				SerializeField(s, nameof(cameraDecenteringDepthMin));
				SerializeField(s, nameof(cameraDecenteringDepthMax));
				SerializeField(s, nameof(cameraMovingSpeedMin));
				SerializeField(s, nameof(cameraMovingSpeedMax));
				SerializeField(s, nameof(cameraMovingBlendAtSpeedMin));
				SerializeField(s, nameof(cameraMovingBlendAtSpeedMax));
				SerializeField(s, nameof(cameraMovingSmooth));
				SerializeField(s, nameof(cameraMovingBlendAccelerationJustSticked));
				SerializeField(s, nameof(rayCastScaleMax));
				SerializeField(s, nameof(lockPositionBlendOnEnter));
				SerializeField(s, nameof(lockPositionBlendOnExit));
				SerializeField(s, nameof(screenLimitUpSpeedMax));
				SerializeField(s, nameof(screenLimitUpScale));
				SerializeField(s, nameof(subjectWeightUnregisterDelay));
				SerializeField(s, nameof(subjectWeightRegisterDelay));
				SerializeField(s, nameof(subjectMainVisibilityHorizontal));
				SerializeField(s, nameof(subjectMainVisibilityVertical));
				SerializeField(s, nameof(cameraMovingSmoothCoeffForLeader));
				SerializeField(s, nameof(subjectMainVisibilitySwitchAxeSpeed));
				SerializeField(s, nameof(zoomBlendInMultiplayer));
				SerializeField(s, nameof(zoomInertieInMultiplayer));
				SerializeField(s, nameof(zoomDelayInMultiplayer));
				SerializeField(s, nameof(dezoomBlendInMultiplayer));
				SerializeField(s, nameof(dezoomInertieInMultiplayer));
				SerializeField(s, nameof(cameraDriftDelay));
				SerializeField(s, nameof(controllerDriftDelay));
				SerializeField(s, nameof(isMainSubject));
				SerializeField(s, nameof(isMainDRCPlayer));
				SerializeField(s, nameof(isLockedAxe));
				SerializeField(s, nameof(isFixed));
			} else {
				SerializeField(s, nameof(cameraLookAtOffsetYUp));
				SerializeField(s, nameof(cameraLookAtOffsetYDown));
				SerializeField(s, nameof(cameraLookAtOffset));
				SerializeField(s, nameof(cameraLookAtOffsetMaxInMulti));
				SerializeField(s, nameof(focale));
				SerializeField(s, nameof(ignoreZ));
				SerializeField(s, nameof(zoneScaleDepthMin));
				SerializeField(s, nameof(zoneScaleDepthMax));
				SerializeField(s, nameof(zoneScaleAtDepthMin));
				SerializeField(s, nameof(zoneScaleAtDepthMax));
				SerializeField(s, nameof(zoneScaleSpeed));
				SerializeField(s, nameof(cameraDecenteringOffsetAtSpeedMin));
				SerializeField(s, nameof(cameraDecenteringOffsetAtSpeedMax));
				SerializeField(s, nameof(cameraDecenteringSpeedMin));
				SerializeField(s, nameof(cameraDecenteringSpeedMax));
				SerializeField(s, nameof(cameraDecenteringBlendAtSpeedMin));
				SerializeField(s, nameof(cameraDecenteringBlendAtSpeedMax));
				SerializeField(s, nameof(cameraDecenteringInertieAtSpeedMin));
				SerializeField(s, nameof(cameraDecenteringInertieAtSpeedMax));
				SerializeField(s, nameof(cameraDecenteringSmooth));
				SerializeField(s, nameof(cameraDecenteringSubjectLookDirWeight));
				SerializeField(s, nameof(cameraDecenteringDepthMin));
				SerializeField(s, nameof(cameraDecenteringDepthMax));
				SerializeField(s, nameof(cameraMovingSpeedMin));
				SerializeField(s, nameof(cameraMovingSpeedMax));
				SerializeField(s, nameof(cameraMovingBlendAtSpeedMin));
				SerializeField(s, nameof(cameraMovingBlendAtSpeedMax));
				SerializeField(s, nameof(cameraMovingSmooth));
				SerializeField(s, nameof(cameraMovingBlendAccelerationJustSticked));
				SerializeField(s, nameof(rayCastScaleMax));
				SerializeField(s, nameof(lockPositionBlendOnEnter));
				SerializeField(s, nameof(lockPositionBlendOnExit));
				SerializeField(s, nameof(screenLimitUpSpeedMax));
				SerializeField(s, nameof(screenLimitUpScale));
				SerializeField(s, nameof(subjectWeightUnregisterDelay));
				SerializeField(s, nameof(subjectWeightRegisterDelay));
				SerializeField(s, nameof(subjectMainVisibilityHorizontal));
				SerializeField(s, nameof(subjectMainVisibilityVertical));
				SerializeField(s, nameof(cameraMovingSmoothCoeffForLeader));
				SerializeField(s, nameof(subjectMainVisibilitySwitchAxeSpeed));
				SerializeField(s, nameof(zoomBlendInMultiplayer));
				SerializeField(s, nameof(isMainSubject));
				SerializeField(s, nameof(isMainDRCPlayer));
				SerializeField(s, nameof(isLockedAxe));
				SerializeField(s, nameof(isFixed));
			}
		}
	}
}

