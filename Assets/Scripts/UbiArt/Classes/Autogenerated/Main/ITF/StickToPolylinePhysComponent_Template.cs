using UnityEngine;

namespace UbiArt.ITF {
	public partial class StickToPolylinePhysComponent_Template : PhysComponent_Template {
		[Serialize("physFriction"                            )] public float physFriction;
		[Serialize("physAirFriction"                         )] public float physAirFriction;
		[Serialize("physUnstickMinAngle"                     )] public Angle physUnstickMinAngle;
		[Serialize("physUnstickMaxAngle"                     )] public Angle physUnstickMaxAngle;
		[Serialize("physUnstickMinAngleSpeed"                )] public float physUnstickMinAngleSpeed;
		[Serialize("physUnstickMaxAngleSpeed"                )] public float physUnstickMaxAngleSpeed;
		[Serialize("physUnstickMinFriction"                  )] public float physUnstickMinFriction;
		[Serialize("physUnstickMinForceExternal"             )] public float physUnstickMinForceExternal;
		[Serialize("physAngularSpeedMinLinear"               )] public float physAngularSpeedMinLinear;
		[Serialize("physAngularSpeedMaxLinear"               )] public float physAngularSpeedMaxLinear;
		[Serialize("physAngularSpeedMinAngular"              )] public Angle physAngularSpeedMinAngular;
		[Serialize("physAngularSpeedMaxAngular"              )] public Angle physAngularSpeedMaxAngular;
		[Serialize("physAngularAirMultiplier"                )] public float physAngularAirMultiplier;
		[Serialize("physGroundAngularSpeedMultiplierMinAngle")] public Angle physGroundAngularSpeedMultiplierMinAngle;
		[Serialize("physGroundAngularSpeedMultiplierMaxAngle")] public Angle physGroundAngularSpeedMultiplierMaxAngle;
		[Serialize("physGroundAngularSpeedMultiplierMinMult" )] public float physGroundAngularSpeedMultiplierMinMult;
		[Serialize("physGroundAngularSpeedMultiplierMaxMult" )] public float physGroundAngularSpeedMultiplierMaxMult;
		[Serialize("physTransferSpeedLossMinAngle"           )] public Angle physTransferSpeedLossMinAngle;
		[Serialize("physTransferSpeedLossMaxAngle"           )] public Angle physTransferSpeedLossMaxAngle;
		[Serialize("physTransferSpeedLossMinLoss"            )] public float physTransferSpeedLossMinLoss;
		[Serialize("physTransferSpeedLossMaxLoss"            )] public float physTransferSpeedLossMaxLoss;
		[Serialize("physSpeedLossLandEdgeMinAngle"           )] public Angle physSpeedLossLandEdgeMinAngle;
		[Serialize("physSpeedLossLandEdgeMaxAngle"           )] public Angle physSpeedLossLandEdgeMaxAngle;
		[Serialize("physSpeedLossLandMinimum"                )] public float physSpeedLossLandMinimum;
		[Serialize("physSpeedLossLandMaximum"                )] public float physSpeedLossLandMaximum;
		[Serialize("physTorqueRotationMultiplier"            )] public float physTorqueRotationMultiplier;
		[Serialize("physMinSpeedStickToWall"                 )] public float physMinSpeedStickToWall;
		[Serialize("physTreatCornerCase"                     )] public bool physTreatCornerCase;
		[Serialize("physCornerCaseDisableDelay"              )] public float physCornerCaseDisableDelay;
		[Serialize("physTreatMovingPolylines"                )] public bool physTreatMovingPolylines;
		[Serialize("physTreatSelfCollision"                  )] public bool physTreatSelfCollision;
		[Serialize("physCurveSlideAndAngle"                  )] public Curve2D physCurveSlideAndAngle;
		[Serialize("displayPhysCurveSlideAndAngle"           )] public bool displayPhysCurveSlideAndAngle;
		[Serialize("physRadius"                              )] public float physRadius;
		[Serialize("physWeight"                              )] public float physWeight;
		[Serialize("physWindMultiplier"                      )] public float physWindMultiplier;
		[Serialize("physWaterMultiplier"                     )] public float physWaterMultiplier;
		[Serialize("physForce2Speed"                         )] public float physForce2Speed;
		[Serialize("physWindSpeedLimit"                      )] public float physWindSpeedLimit;
		[Serialize("physWindScaleFactorWhenSpeedIsOpposite"  )] public float physWindScaleFactorWhenSpeedIsOpposite;
		[Serialize("physFanForceMultiplier"                  )] public float physFanForceMultiplier;
		[Serialize("physWaterMinPerturbation"                )] public float physWaterMinPerturbation;
		protected override void SerializeImpl(CSerializerObject s) {
			base.SerializeImpl(s);
			if (Settings.s.game == Settings.Game.RO) {
				SerializeField(s, nameof(physFriction));
				SerializeField(s, nameof(physAirFriction));
				SerializeField(s, nameof(physUnstickMinAngle));
				SerializeField(s, nameof(physUnstickMaxAngle));
				SerializeField(s, nameof(physUnstickMinAngleSpeed));
				SerializeField(s, nameof(physUnstickMaxAngleSpeed));
				SerializeField(s, nameof(physUnstickMinFriction));
				SerializeField(s, nameof(physUnstickMinForceExternal));
				SerializeField(s, nameof(physAngularSpeedMinLinear));
				SerializeField(s, nameof(physAngularSpeedMaxLinear));
				SerializeField(s, nameof(physAngularSpeedMinAngular));
				SerializeField(s, nameof(physAngularSpeedMaxAngular));
				SerializeField(s, nameof(physAngularAirMultiplier));
				SerializeField(s, nameof(physGroundAngularSpeedMultiplierMinAngle));
				SerializeField(s, nameof(physGroundAngularSpeedMultiplierMaxAngle));
				SerializeField(s, nameof(physGroundAngularSpeedMultiplierMinMult));
				SerializeField(s, nameof(physGroundAngularSpeedMultiplierMaxMult));
				SerializeField(s, nameof(physTransferSpeedLossMinAngle));
				SerializeField(s, nameof(physTransferSpeedLossMaxAngle));
				SerializeField(s, nameof(physTransferSpeedLossMinLoss));
				SerializeField(s, nameof(physTransferSpeedLossMaxLoss));
				SerializeField(s, nameof(physSpeedLossLandEdgeMinAngle));
				SerializeField(s, nameof(physSpeedLossLandEdgeMaxAngle));
				SerializeField(s, nameof(physSpeedLossLandMinimum));
				SerializeField(s, nameof(physSpeedLossLandMaximum));
				SerializeField(s, nameof(physTorqueRotationMultiplier));
				SerializeField(s, nameof(physMinSpeedStickToWall));
				SerializeField(s, nameof(physTreatCornerCase));
				SerializeField(s, nameof(physCornerCaseDisableDelay));
				SerializeField(s, nameof(physTreatMovingPolylines));
			} else if (Settings.s.game == Settings.Game.RL) {
				SerializeField(s, nameof(physFriction));
				SerializeField(s, nameof(physAirFriction));
				SerializeField(s, nameof(physUnstickMinAngle));
				SerializeField(s, nameof(physUnstickMaxAngle));
				SerializeField(s, nameof(physUnstickMinAngleSpeed));
				SerializeField(s, nameof(physUnstickMaxAngleSpeed));
				SerializeField(s, nameof(physUnstickMinFriction));
				SerializeField(s, nameof(physUnstickMinForceExternal));
				SerializeField(s, nameof(physAngularSpeedMinLinear));
				SerializeField(s, nameof(physAngularSpeedMaxLinear));
				SerializeField(s, nameof(physAngularSpeedMinAngular));
				SerializeField(s, nameof(physAngularSpeedMaxAngular));
				SerializeField(s, nameof(physAngularAirMultiplier));
				SerializeField(s, nameof(physGroundAngularSpeedMultiplierMinAngle));
				SerializeField(s, nameof(physGroundAngularSpeedMultiplierMaxAngle));
				SerializeField(s, nameof(physGroundAngularSpeedMultiplierMinMult));
				SerializeField(s, nameof(physGroundAngularSpeedMultiplierMaxMult));
				SerializeField(s, nameof(physTransferSpeedLossMinAngle));
				SerializeField(s, nameof(physTransferSpeedLossMaxAngle));
				SerializeField(s, nameof(physTransferSpeedLossMinLoss));
				SerializeField(s, nameof(physTransferSpeedLossMaxLoss));
				SerializeField(s, nameof(physSpeedLossLandEdgeMinAngle));
				SerializeField(s, nameof(physSpeedLossLandEdgeMaxAngle));
				SerializeField(s, nameof(physSpeedLossLandMinimum));
				SerializeField(s, nameof(physSpeedLossLandMaximum));
				SerializeField(s, nameof(physTorqueRotationMultiplier));
				SerializeField(s, nameof(physMinSpeedStickToWall));
				SerializeField(s, nameof(physTreatCornerCase));
				SerializeField(s, nameof(physCornerCaseDisableDelay));
				SerializeField(s, nameof(physTreatMovingPolylines));
				SerializeField(s, nameof(physTreatSelfCollision));
			} else {
				SerializeField(s, nameof(physFriction));
				SerializeField(s, nameof(physAirFriction));
				SerializeField(s, nameof(physUnstickMinAngle));
				SerializeField(s, nameof(physUnstickMaxAngle));
				SerializeField(s, nameof(physUnstickMinAngleSpeed));
				SerializeField(s, nameof(physUnstickMaxAngleSpeed));
				SerializeField(s, nameof(physUnstickMinFriction));
				SerializeField(s, nameof(physUnstickMinForceExternal));
				SerializeField(s, nameof(physAngularSpeedMinLinear));
				SerializeField(s, nameof(physAngularSpeedMaxLinear));
				SerializeField(s, nameof(physAngularSpeedMinAngular));
				SerializeField(s, nameof(physAngularSpeedMaxAngular));
				SerializeField(s, nameof(physAngularAirMultiplier));
				SerializeField(s, nameof(physGroundAngularSpeedMultiplierMinAngle));
				SerializeField(s, nameof(physGroundAngularSpeedMultiplierMaxAngle));
				SerializeField(s, nameof(physGroundAngularSpeedMultiplierMinMult));
				SerializeField(s, nameof(physGroundAngularSpeedMultiplierMaxMult));
				SerializeField(s, nameof(physTransferSpeedLossMinAngle));
				SerializeField(s, nameof(physTransferSpeedLossMaxAngle));
				SerializeField(s, nameof(physTransferSpeedLossMinLoss));
				SerializeField(s, nameof(physTransferSpeedLossMaxLoss));
				SerializeField(s, nameof(physSpeedLossLandEdgeMinAngle));
				SerializeField(s, nameof(physSpeedLossLandEdgeMaxAngle));
				SerializeField(s, nameof(physSpeedLossLandMinimum));
				SerializeField(s, nameof(physSpeedLossLandMaximum));
				SerializeField(s, nameof(physTorqueRotationMultiplier));
				SerializeField(s, nameof(physMinSpeedStickToWall));
				SerializeField(s, nameof(physTreatCornerCase));
				SerializeField(s, nameof(physCornerCaseDisableDelay));
				SerializeField(s, nameof(physTreatMovingPolylines));
				SerializeField(s, nameof(physTreatSelfCollision));
				SerializeField(s, nameof(physCurveSlideAndAngle));
				SerializeField(s, nameof(displayPhysCurveSlideAndAngle));
				SerializeField(s, nameof(physRadius));
				SerializeField(s, nameof(physWeight));
				SerializeField(s, nameof(physWindMultiplier));
				SerializeField(s, nameof(physWaterMultiplier));
				SerializeField(s, nameof(physForce2Speed));
				SerializeField(s, nameof(physWindSpeedLimit));
				SerializeField(s, nameof(physWindScaleFactorWhenSpeedIsOpposite));
				SerializeField(s, nameof(physFanForceMultiplier));
				SerializeField(s, nameof(physWaterMinPerturbation));
			}
		}
		public override uint? ClassCRC => 0xE85B6A29;
	}
}

