using UnityEngine;

namespace UbiArt.ITF {
	[Games(GameFlags.RA | GameFlags.RL)]
	public partial class RO2_HomeManager_Template : TemplateObj {
		[Serialize("tombPath"                              )] public Path tombPath;
		[Serialize("tombIconPath"                          )] public Path tombIconPath;
		[Serialize("challengeEndDelay"                     )] public float challengeEndDelay;
		[Serialize("challengeEndDelayAfterDistanceSuccess" )] public float challengeEndDelayAfterDistanceSuccess;
		[Serialize("saveDelayMin"                          )] public float saveDelayMin;
		[Serialize("competitionsModes"                     )] public CList<CompetitionModeInfo> competitionsModes;
		[Serialize("competitionsLevels"                    )] public CList<CompetitionLevelInfo> competitionsLevels;
		[Serialize("statsInfos"                            )] public CList<StatInfos> statsInfos;
		[Serialize("playerLevelInfos"                      )] public CList<PlayerLevelInfos> playerLevelInfos;
		[Serialize("cupInfos"                              )] public CList<CupInfos> cupInfos;
		[Serialize("messages"                              )] public CList<ITF.Message> messages;
		[Serialize("messages"                              )] public CList<online.Message> messagesAdventures;
		[Serialize("medalColors"                           )] public CArray<Color> medalColors;
		[Serialize("miiverseMenuSequenceNames"             )] public CArray<StringID> miiverseMenuSequenceNames;
		[Serialize("countryId"                             )] public CArray<int> countryId;
		[Serialize("emblemDev"                             )] public Path emblemDev;
		[Serialize("emblemVip"                             )] public Path emblemVip;
		[Serialize("CompetitionFrequencyIcon_Daily"        )] public Path CompetitionFrequencyIcon_Daily;
		[Serialize("CompetitionFrequencyIcon_Weekly"       )] public Path CompetitionFrequencyIcon_Weekly;
		[Serialize("CompetitionFrequencyIcon_Weekly_Expert")] public Path CompetitionFrequencyIcon_Weekly_Expert;
		[Serialize("CompetitionFrequencyIcon_Daily_Expert" )] public Path CompetitionFrequencyIcon_Daily_Expert;
		[Serialize("challengeFailedFX"                     )] public StringID challengeFailedFX;
		[Serialize("challengeSuccessFX"                    )] public StringID challengeSuccessFX;
		[Serialize("challengeBestScoreFX"                  )] public StringID challengeBestScoreFX;
		[Serialize("challengeTimesUpText"                  )] public SmartLocId challengeTimesUpText;
		[Serialize("legendsWorldUnlock"                    )] public SmartLocId legendsWorldUnlock;
		[Serialize("legendsWorldUnlockButton"              )] public SmartLocId legendsWorldUnlockButton;
		[Serialize("legendsWorldUnlockButton2"             )] public SmartLocId legendsWorldUnlockButton2;
		[Serialize("princessUnlock"                        )] public SmartLocId princessUnlock;
		[Serialize("worldUnlock"                           )] public SmartLocId worldUnlock;
		[Serialize("worldUnlockButton"                     )] public SmartLocId worldUnlockButton;
		[Serialize("levelUnlock"                           )] public SmartLocId levelUnlock;
		[Serialize("levelUnlockButton"                     )] public SmartLocId levelUnlockButton;
		[Serialize("retroLevelUnlock"                      )] public SmartLocId retroLevelUnlock;
		[Serialize("retroLevelUnlockButton"                )] public SmartLocId retroLevelUnlockButton;
		[Serialize("petUnlock"                             )] public SmartLocId petUnlock;
		[Serialize("petUnlockButton"                       )] public SmartLocId petUnlockButton;
		[Serialize("costumeUnlock"                         )] public SmartLocId costumeUnlock;
		[Serialize("costumeUnlockButton"                   )] public SmartLocId costumeUnlockButton;
		[Serialize("challengeUnlock"                       )] public SmartLocId challengeUnlock;
		[Serialize("challengeUnlockButton"                 )] public SmartLocId challengeUnlockButton;
		[Serialize("invasionUnlock"                        )] public SmartLocId invasionUnlock;
		[Serialize("invasionUnlockButton"                  )] public SmartLocId invasionUnlockButton;
		[Serialize("invasionFailedTitle"                   )] public SmartLocId invasionFailedTitle;
		[Serialize("invasionFailedText"                    )] public SmartLocId invasionFailedText;
		[Serialize("invasionOneTeensySuccess"              )] public SmartLocId invasionOneTeensySuccess;
		[Serialize("invasionTwoTeensySuccess"              )] public SmartLocId invasionTwoTeensySuccess;
		[Serialize("invasionThreeTeensySuccess"            )] public SmartLocId invasionThreeTeensySuccess;
		[Serialize("invasionScoreText"                     )] public SmartLocId invasionScoreText;
		[Serialize("invasionRecordText"                    )] public SmartLocId invasionRecordText;
		[Serialize("difficulty1"                           )] public SmartLocId difficulty1;
		[Serialize("difficulty2"                           )] public SmartLocId difficulty2;
		[Serialize("difficulty3"                           )] public SmartLocId difficulty3;
		[Serialize("difficulty4"                           )] public SmartLocId difficulty4;
		[Serialize("difficulty5"                           )] public SmartLocId difficulty5;
		[Serialize("unlockHighlightColor"                  )] public Color unlockHighlightColor;
		[Serialize("unlockHighlightSize"                   )] public float unlockHighlightSize;
		[Serialize("unitMeters"                            )] public SmartLocId unitMeters;
		[Serialize("unitKMeters"                           )] public SmartLocId unitKMeters;
		[Serialize("unitPoints"                            )] public SmartLocId unitPoints;
		[Serialize("unitPoint"                             )] public SmartLocId unitPoint;
		[Serialize("unit0Points"                           )] public SmartLocId unit0Points;
		[Serialize("unitLums"                              )] public SmartLocId unitLums;
		[Serialize("syncMessageDelayMin"                   )] public float syncMessageDelayMin;
		[Serialize("syncMessageDelayMax"                   )] public float syncMessageDelayMax;
		[Serialize("syncMessageRestartDelay"               )] public float syncMessageRestartDelay;
		protected override void SerializeImpl(CSerializerObject s) {
			base.SerializeImpl(s);
			if (Settings.s.game == Settings.Game.RL) {
				SerializeField(s, nameof(tombPath));
				SerializeField(s, nameof(tombIconPath));
				SerializeField(s, nameof(challengeEndDelay));
				SerializeField(s, nameof(challengeEndDelayAfterDistanceSuccess));
				SerializeField(s, nameof(saveDelayMin));
				SerializeField(s, nameof(competitionsModes));
				SerializeField(s, nameof(competitionsLevels));
				SerializeField(s, nameof(statsInfos));
				SerializeField(s, nameof(playerLevelInfos));
				SerializeField(s, nameof(cupInfos));
				SerializeField(s, nameof(messages));
				SerializeField(s, nameof(medalColors));
				SerializeField(s, nameof(miiverseMenuSequenceNames));
				SerializeField(s, nameof(countryId));
				SerializeField(s, nameof(CompetitionFrequencyIcon_Daily));
				SerializeField(s, nameof(CompetitionFrequencyIcon_Weekly));
				SerializeField(s, nameof(CompetitionFrequencyIcon_Weekly_Expert));
				SerializeField(s, nameof(CompetitionFrequencyIcon_Daily_Expert));
				SerializeField(s, nameof(challengeFailedFX));
				SerializeField(s, nameof(challengeSuccessFX));
				SerializeField(s, nameof(challengeBestScoreFX));
				SerializeField(s, nameof(challengeTimesUpText));
				SerializeField(s, nameof(legendsWorldUnlock));
				SerializeField(s, nameof(legendsWorldUnlockButton));
				SerializeField(s, nameof(legendsWorldUnlockButton2));
				SerializeField(s, nameof(princessUnlock));
				SerializeField(s, nameof(worldUnlock));
				SerializeField(s, nameof(worldUnlockButton));
				SerializeField(s, nameof(levelUnlock));
				SerializeField(s, nameof(levelUnlockButton));
				SerializeField(s, nameof(retroLevelUnlock));
				SerializeField(s, nameof(retroLevelUnlockButton));
				SerializeField(s, nameof(petUnlock));
				SerializeField(s, nameof(petUnlockButton));
				SerializeField(s, nameof(costumeUnlock));
				SerializeField(s, nameof(costumeUnlockButton));
				SerializeField(s, nameof(challengeUnlock));
				SerializeField(s, nameof(challengeUnlockButton));
				SerializeField(s, nameof(invasionUnlock));
				SerializeField(s, nameof(invasionUnlockButton));
				SerializeField(s, nameof(invasionFailedTitle));
				SerializeField(s, nameof(invasionFailedText));
				SerializeField(s, nameof(invasionOneTeensySuccess));
				SerializeField(s, nameof(invasionTwoTeensySuccess));
				SerializeField(s, nameof(invasionThreeTeensySuccess));
				SerializeField(s, nameof(invasionScoreText));
				SerializeField(s, nameof(invasionRecordText));
				SerializeField(s, nameof(difficulty1));
				SerializeField(s, nameof(difficulty2));
				SerializeField(s, nameof(difficulty3));
				SerializeField(s, nameof(difficulty4));
				SerializeField(s, nameof(difficulty5));
				SerializeField(s, nameof(unlockHighlightColor));
				SerializeField(s, nameof(unlockHighlightSize));
				SerializeField(s, nameof(unitMeters));
				SerializeField(s, nameof(unitKMeters));
				SerializeField(s, nameof(unitPoints));
				SerializeField(s, nameof(unitPoint));
				SerializeField(s, nameof(unit0Points));
				SerializeField(s, nameof(unitLums));
				SerializeField(s, nameof(syncMessageDelayMin));
				SerializeField(s, nameof(syncMessageDelayMax));
				SerializeField(s, nameof(syncMessageRestartDelay));
			} else {
				SerializeField(s, nameof(tombPath));
				SerializeField(s, nameof(tombIconPath));
				SerializeField(s, nameof(challengeEndDelay));
				SerializeField(s, nameof(challengeEndDelayAfterDistanceSuccess));
				SerializeField(s, nameof(saveDelayMin));
				SerializeField(s, nameof(competitionsModes));
				SerializeField(s, nameof(competitionsLevels));
				SerializeField(s, nameof(statsInfos));
				SerializeField(s, nameof(playerLevelInfos));
				SerializeField(s, nameof(cupInfos));
				SerializeField(s, nameof(messagesAdventures));
				SerializeField(s, nameof(medalColors));
				SerializeField(s, nameof(medalColors));
				SerializeField(s, nameof(miiverseMenuSequenceNames));
				SerializeField(s, nameof(miiverseMenuSequenceNames));
				SerializeField(s, nameof(countryId));
				SerializeField(s, nameof(countryId));
				SerializeField(s, nameof(emblemDev));
				SerializeField(s, nameof(emblemVip));
				SerializeField(s, nameof(CompetitionFrequencyIcon_Daily));
				SerializeField(s, nameof(CompetitionFrequencyIcon_Weekly));
				SerializeField(s, nameof(CompetitionFrequencyIcon_Weekly_Expert));
				SerializeField(s, nameof(CompetitionFrequencyIcon_Daily_Expert));
				SerializeField(s, nameof(challengeFailedFX));
				SerializeField(s, nameof(challengeSuccessFX));
				SerializeField(s, nameof(challengeBestScoreFX));
				SerializeField(s, nameof(challengeTimesUpText));
				SerializeField(s, nameof(legendsWorldUnlock));
				SerializeField(s, nameof(legendsWorldUnlockButton));
				SerializeField(s, nameof(legendsWorldUnlockButton2));
				SerializeField(s, nameof(princessUnlock));
				SerializeField(s, nameof(worldUnlock));
				SerializeField(s, nameof(worldUnlockButton));
				SerializeField(s, nameof(levelUnlock));
				SerializeField(s, nameof(levelUnlockButton));
				SerializeField(s, nameof(retroLevelUnlock));
				SerializeField(s, nameof(retroLevelUnlockButton));
				SerializeField(s, nameof(petUnlock));
				SerializeField(s, nameof(petUnlockButton));
				SerializeField(s, nameof(costumeUnlock));
				SerializeField(s, nameof(costumeUnlockButton));
				SerializeField(s, nameof(challengeUnlock));
				SerializeField(s, nameof(challengeUnlockButton));
				SerializeField(s, nameof(invasionUnlock));
				SerializeField(s, nameof(invasionUnlockButton));
				SerializeField(s, nameof(invasionFailedTitle));
				SerializeField(s, nameof(invasionFailedText));
				SerializeField(s, nameof(invasionOneTeensySuccess));
				SerializeField(s, nameof(invasionTwoTeensySuccess));
				SerializeField(s, nameof(invasionThreeTeensySuccess));
				SerializeField(s, nameof(invasionScoreText));
				SerializeField(s, nameof(invasionRecordText));
				SerializeField(s, nameof(difficulty1));
				SerializeField(s, nameof(difficulty2));
				SerializeField(s, nameof(difficulty3));
				SerializeField(s, nameof(difficulty4));
				SerializeField(s, nameof(difficulty5));
				SerializeField(s, nameof(unlockHighlightColor));
				SerializeField(s, nameof(unlockHighlightSize));
				SerializeField(s, nameof(unitMeters));
				SerializeField(s, nameof(unitKMeters));
				SerializeField(s, nameof(unitPoints));
				SerializeField(s, nameof(unitPoint));
				SerializeField(s, nameof(unit0Points));
				SerializeField(s, nameof(unitLums));
				SerializeField(s, nameof(syncMessageDelayMin));
				SerializeField(s, nameof(syncMessageDelayMax));
				SerializeField(s, nameof(syncMessageRestartDelay));
			}
		}
		public override uint? ClassCRC => 0xBF5E4832;
	}
}

